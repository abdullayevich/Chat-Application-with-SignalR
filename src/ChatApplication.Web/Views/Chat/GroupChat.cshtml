@using ChatApplication.Service.ViewModels.MessageViewModel
@model IList<MessageViewModel>
@{
    string chatId = Context.Request.Query["chatId"];
    string chatName = Context.Request.Query["chatName"];
    ViewData["Title"] = "All Chats";
}
<div class="chat-container">
    <div class="chat-header">
        <h3>@chatName Chat</h3>
    </div>

    <div class="chat-window" id="chatWindow">
        <ul id="messagesList"></ul>
    </div>

    <div class="message-input">
    <input type="text" id="messageInput" placeholder="Xabarni yozing" />
    <button class="send-butto send-button:hover" onclick="sendMessage()">Yuborish</button>
    <button onclick="leaveGroup()">Guruhdan chiqish</button>
</div>
</div>

@section Scripts {
        <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.7/signalr.min.js"></script>
            <script type="text/javascript">
        const connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();
        

            connection.on("ReceiveMessage", function (user, message, timestamp) {
                const formattedTime = new Date(timestamp).toLocaleString(); 
                addMessageToChatWindow(user, message,formattedTime);
        });

        connection.start().then(function(){
                joinGroup('@chatName');
        }).catch(function (err) {
            return console.error(err.toString());
        });

        function joinGroup(chatName) {
                console.log("Join Group ishladi", chatName);
            connection.invoke("JoinGroup", chatName).catch(function (err) {
                return console.error(err.toString());
            });

            // Guruh uchun avvalgi xabarlarni olish
                fetch(`/GetMessages/${chatName}`)
            .then(response => response.json())
            .then(messages => {
                messages.forEach(msg => {
                    const user = msg.fromUserName;
                    const message = msg.messageContent;
                    const timestamp = new Date(msg.timestamp).toLocaleString();

                    addMessageToChatWindow(user, message, timestamp);
                });
                    console.log("Eski ma'lumotlar keldi", chatName);

            })
            .catch(err => console.error('Xabarlarni olishda xato:', err));
        }

        function leaveGroup() {
            const groupName = document.getElementById("groupInput").value;
            connection.invoke("LeaveGroup", groupName).catch(function (err) {
                return console.error(err.toString());
            });
        }

                function sendMessage() {
        const groupName = document.getElementById("groupInput").value;
        const message = document.getElementById("messageInput").value;

        if (message) {
            connection.invoke("SendMessage", '@chatName', message)
                .then(() => console.log('Xabar yuborildi:', message))
                .catch(function (err) {
                    console.error('Xabar yuborishda xato:', err.toString());
                });

            document.getElementById("messageInput").value = ''; 
        } else {
            console.error('Xabar bo\'sh, iltimos xabar kiriting!');
        }
    }


    function addMessageToChatWindow(user, message, timestamp) {
        const li = document.createElement("li");
        li.classList.add("message-item");

        const messageText = document.createElement("span");
        messageText.textContent = `${user}: ${message}`;

        const timeText = document.createElement("small");
        timeText.textContent = ` (${timestamp})`;
        timeText.classList.add("message-timestamp"); 

        li.appendChild(messageText); 
        li.appendChild(timeText);
        document.getElementById("messagesList").appendChild(li);
        document.getElementById("chatWindow").scrollTop = document.getElementById("chatWindow").scrollHeight;
    }
    </script>
}
